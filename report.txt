Rapport

Jag använde mig av Git Bash i Windows och jag kodar i IntelliJ. Efter att jag hade skapat mina filer
så använde jag [git init] för att skapa en ".git"-mapp i min projektmapp. Git-mappen innehåller projektets
versionshistoria där varje commit har en unik hash-adress. Därefter skrev jag [git add --all] för att
stagea filerna till min commit. Jag kontrollerade vad jag hade stagead med [git status] och såg att IntelliJ
hade massa extra filer som jag inte var intresserad av att ta med. Jag tog bort filerna en och en med
[git rm --cached <namnet på en fil att ta bort>] innan jag insåg att jag hade kunnat använda [git reset] för att börja om.
För att stagea de tre filer jag ville ha med i min commit så skrev jag [git add <namn på filer>].
Jag dubbelkollade [git status] igen för att försäkra mig om att jag hade stageat rätt filer.
Därefter gjorde jag min första commit med kommandot [git commit -m "first commit"]. Därefter var det dags att pusha min
commit till min remotea server, GitHub. Först skapade jag ett nytt repository på Github och följde instruktionerna där.
Jag tänkte att jag skulle anpassa mig efter deras namnbyte av "master"-branchen till "main"-branchen vilket jag gjorde med
kommandot [git branch -M main], efter att ha försäkrat mig om att Git by default kör på "master" med [git branch].
Därefter satte jag upp URL till mitt repo med [git remote add origin https://github.com/Bayesd/Versionshanteringssystem.git]
för att sedan pusha med [git push -u origin main]. Sedan uppdaterade jag GitHub fönstrett förr att försäkra mig om att
uppladdningen hade skett ordentligt.

För att skapa en ny branch med namnet "important changes" använde jag [git checkout -b important-changes]
vilket kombinerar två kommandon, [git branch important-changes] följt av [git checkout important-changes].
Detta kommando både skapade den nya branchen och förflyttade mig från main-branchen till den nya.
Efter att ha gjort förändringar i koden så skrev jag [git push] och fick från felmeddelandet det rätta kommandot
för att pusha en ny branch, [git push --set-upstream origin important-changes]. Jag använde [git help] för att
förstå vad origin betydde och i kombination med google förstod jag att origin hänvisade till URLen som jag gav lade till
när jag körde [git remote add origin].

För att skapa en pull request och mergea de två brancherna så använde jag här inte terminalen för att skapa ett pull request
från "important-changes"- branchen in i "main"-branchen, utan jag använde mig av GitHubs webbgränssnitt.

Del 2
Jag fick tag i en länk till Jims repo som jag via GitHubs webbgränssnitt forkade så att jag hade en kopia av hans repo
som jag konde förändra utan att det påverkade hans kod. Jag klonade detta kopierade repository från remote till local
med [git clone https://github.com/Bayesd/GitStuff.git]. Jag skapade an ny branch med [git checkout -b improvements].
Därefter lade jag till funktionalitet att skilja på jämna och udda tal och pushade den nya branchen till origin
med [git push --set-upstream origin improvements], jag vill minnas att jag inte behövde ge URL då origin
definierades vid klonandet av remote repot. Jag gick sedan till Jims GitHub repo och skapade en pull request
via GitHubs webbgränssnitt. Jag såg senare att Jim hade accepterat min pull request och att en merge hade ägt rum.

Jim gjorde även en pull request på mitt remote repo som jag accepterade och gjorde en merge.

Nu när jag skriver rapport och frågor har jag behövt uppdatera mitt lokala repo med [git pull] för att kunna pusha
förändringarna i questions.txt och report.txt.

Fördelen med att använda pull requests är att ha möjlighet att göra code review på den pull requestade koden innan den
integreras in i en annan branch, t.ex main-branchen. Detta möjliggör att oönskad kod upptäcks och
kan åtgärdas innan det ger upphov till buggar och andra problem.
Pull requests, som jag förstår det, används i teams för att utvecklare ska lämna över sin kod för att
den ska bli diskutera, granskad och testad av kunninga kollegor innan koden tillåts merga med den branchen som
den vill merga med. På detta sättet delar många ansvaret att koden är korrekt innan den accepteras
vilket förhoppningsvis förhindrar buggar och andra konsekvenser av dålig kod att komma med. Samt att det
ger bra möjlighet att få feedback på sin kod.

Det görs tydligt med versionshantering vem som har gjort något och vad denna har gjort.
Versionshantering med Git uppmanar utvecklare att göra commits när de har åstadkommit en förändring,
samt att ge en kort beskrivning på denna förändring. Det tar inte mer än några sekunder att commita en
version och skriva en kommentar men det kan spara många timmars arbete att ha en bra versionshistoria till
förfogande i ett komplext projekt. Om en utvecklare ansluter till ett projekt som har löpt under en tid
så har denna utvecklaren tillgång till projektets hela historia genom versionshistoriken. Detta kan vara
väldigt bra för att sätta sig in i projektet och bli en produktiv medarbetare.
Om det har rapporterats om buggar som behöver fixas så kan versionshanteringen visas ovärdelig eftersom det då kan
återskapas precis den versionen som användes vid tiden buggarna upptäcktes. En senare version kanske gör
att buggarna inte dyker upp på samma sätt och då kan avfärdas med möjlighet att ligga kvar och skapa oreda i projektet.

Versionshantering är viktigt att använda sig av då det ger möjlighet att återskapa projektet
till vilken tidigare commitad version som helst. Detta gäller åtminstone för git och annan programvara
för versionshantering. Det går att versionshantera manuellt också, t.ex. att skapa en ny
kopia av projektet varje dag du ska arbeta med det. Detta kan ha fördelar om du är ensam utvecklare,
men när det kommer till arbete i utvecklingteam så skulle en sådan typ av versionhantering ge upphov
till väldigt många kopior och skapa förvirring, vilket skulle ta mycket onödig tid.
Oavsett så skulle även denna typ av manuell versionshantering vara bättre än ingen alls.
Det kan hända att omständigheter för ett projekt förändras och att allt behöver återställas till hur
det var för en månad sedan eller med funktionalitet som sedan länge försvunnit ur projektet.
Om ingen versionshantering har använts så finns det inget sätt att återskapa projektet till sin dåvarande
utformning, allt måste skrivas om. Med Git så är det bara att leta upp rätt commit och återskapa rätt version.

Under arbetet med inlämninguppgiften har det varit smidigt att integrera Jims förbättringar av min kod med pull request
samt att det gick väldigt enkelt att få en kopia av Jims projekt att kunna arbeta med utan att oroa mig att förstöra något.
Bara på några sekunder fanns det 4 kopior av båda våras projekt, 2 lokala på våra datorer samt två remote på GitHub.
Det är tydligt i historiken när Jim gjorde pull request och jag kan enkelt återskapa en äldre version av projektet om jag vill.
Jag behövde inte själv klippa och klistra in kod manuellt. Jag fick också se markerat vad som skulle
förändras om jag accepterade pull requesten så att jag inte behövde läsa igenom all kod igen.





